#!/bin/bash

# Copyright 2015 The Kubernetes Authors.
# Copyright 2017 Piotr Mazurkiewicz <piotr.mazurkiewicz@sysoperator.pl>
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Required packages:
#
#  - jq
#  - thin-provisionig-tools
#
echo $0 $@ >> /tmp/lvm-plugin.log

usage() {
	err "Invalid usage. Usage: "
	err "\t$0 init"
	err "\t$0 attach <json params> <nodename>"
	err "\t$0 detach <mount device> <nodename>"
	err "\t$0 waitforattach <mount device> <json params>"
	err "\t$0 mountdevice <mount dir> <mount device> <json params>"
	err "\t$0 unmountdevice <mount dir>"
	err "\t$0 isattached <json params> <nodename>"
	exit 1
}

err() {
	echo -ne $* 1>&2
}

log() {
	echo -ne $* >&1
}

ismounted() {
	MOUNT=`findmnt -n ${MNTPATH} 2>/dev/null | cut -d' ' -f1`
	if [ "${MOUNT}" == "${MNTPATH}" ]; then
		echo "1"
	else
		echo "0"
	fi
}

getdevice() {
	VOLUMEID=$(echo ${JSON_PARAMS} | jq -r '.volumeID')
	VG=$(echo ${JSON_PARAMS} | jq -r '.volumegroup')

	# LVM substitutes - with --
	VOLUMEID=`echo $VOLUMEID | sed s/-/--/g`
	VG=`echo $VG | sed s/-/--/g`

	DMDEV="/dev/mapper/${VG}-${VOLUMEID}"
	echo ${DMDEV}
}

attach() {
	JSON_PARAMS=$1
	VOLUMEID=$(echo ${JSON_PARAMS} | jq -r '.volumeID')
	VG=$(echo ${JSON_PARAMS} | jq -r '.volumegroup')
	THINPOOL=$(echo ${JSON_PARAMS} | jq -r '.thinpool | select(type == "string")')
	SIZE=$(echo ${JSON_PARAMS} | jq -r '.size')

	DMDEV=$(getdevice)
	if [ ! -b "${DMDEV}" ]; then
		if [ -n "${THINPOOL}" ]; then
			LVCREATE_OPTS="-n ${VOLUMEID} -V ${SIZE} --thinpool ${VG}/${THINPOOL}"
		else
			LVCREATE_OPTS="-n ${VOLUMEID} -L ${SIZE} ${VG}"
		fi

		lvcreate ${LVCREATE_OPTS} 2>&1 > /dev/null
		if [ "$?" != "0" ]; then
			err "{\"status\": \"Failure\", \"message\": \"Could not attach ${VG}/${VOLUMEID}\"}"
			exit 1
		fi
	fi
	log "{\"status\": \"Success\", \"device\":\"${DMDEV}\"}"
	exit 0
}

detach() {

	log "{\"status\": \"Success\"}"
	exit 0
}

waitforattach() {
	shift
	attach $*
}

domountdevice() {
	MNTPATH=$1
	DMDEV=$2
	FSTYPE=$(echo $3 | jq -r '.["kubernetes.io/fsType"]')
	MNTOPTIONS=$(echo $3 | jq -r '.mountoptions | select(type == "string")')

	if [ ! -b "${DMDEV}" ]; then
		err "{\"status\": \"Failure\", \"message\": \"${DMDEV} does not exist\"}"
		exit 1
	fi

	if [ $(ismounted) -eq 1 ] ; then
		log "{\"status\": \"Success\"}"
		exit 0
	fi

	VOLFSTYPE=`blkid -o udev ${DMDEV} 2>/dev/null|grep "ID_FS_TYPE"|cut -d"=" -f2`
	if [ "${VOLFSTYPE}" == "" ]; then
		mkfs -t ${FSTYPE} ${DMDEV} >/dev/null 2>&1
		if [ $? -ne 0 ]; then
			err "{ \"status\": \"Failure\", \"message\": \"Failed to create fs ${FSTYPE} on device ${DMDEV}\"}"
			exit 1
		fi
	fi

	mkdir -p ${MNTPATH} &> /dev/null

	if [ -n "$MNTOPTIONS" ]; then
		MNTOPTIONS="-o ${MNTOPTIONS}"
	fi
	mount ${MNTOPTIONS} ${DMDEV} ${MNTPATH} &> /dev/null
	if [ $? -ne 0 ]; then
		err "{ \"status\": \"Failure\", \"message\": \"Failed to mount device ${DMDEV} at ${MNTPATH}\"}"
		exit 1
	fi
	log "{\"status\": \"Success\"}"
	exit 0
}


finddevice() {
	MNTPATH=$1
	
	DEVICE=`findmnt -n ${MNTPATH} 2>/dev/null | cut -d' ' -f2`
	echo ${DEVICE}
}

unmountdevice() {
	MNTPATH=$1
	if [ ! -d ${MNTPATH} ]; then
		log "{\"status\": \"Success\"}"
		exit 0
	fi

	if [ $(ismounted) -eq 0 ] ; then
		log "{\"status\": \"Success\"}"
		exit 0
	fi

	DEVICE=`finddevice $MNTPATH`
	
	umount ${MNTPATH} &> /dev/null
	if [ $? -ne 0 ]; then
		err "{ \"status\": \"Failed\", \"message\": \"Failed to unmount volume at ${MNTPATH}\"}"
		exit 1
	fi

	#lvremove ${DEVICE} -y 2>&1 > /dev/null
	#if [ "$?" != "0" ]; then
	#	err "{\"status\": \"Failure\", \"message\": \"Could not delete ${DEVICE}\"}"
	#	exit 1
	#fi 
	
	log "{\"status\": \"Success\"}"
	exit 0
}

isattached() {
	log "{\"status\": \"Success\", \"attached\":true}"
	exit 0
}

op=$1

if [ "$op" = "init" ]; then
	log "{\"status\": \"Success\"}"
	exit 0
fi

if [ $# -lt 2 ]; then
	usage
fi

shift

case "$op" in
	attach)
		attach $*
		;;
	detach)
		detach $*
		;;
	waitforattach)
		waitforattach $*
		;;
	mountdevice)
		domountdevice $*
		;;
	unmountdevice)
		unmountdevice $*
		;;
	isattached)
		isattached $*
		;;
	*)
		log "{ \"status\": \"Not supported\" }"
		exit 0
esac

exit 1
