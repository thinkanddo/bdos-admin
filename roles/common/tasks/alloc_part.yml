#alloc_part

#依赖参数:
#  storeType 参数解释
#  *  1:   设备需要做成lvm 并挂载目录
#  *  2:   表示存储将形成一个独立的磁盘，不可有多块盘合并而成
#  *  3:   表示 存储配置可以来自多块存储盘，最终合并成为一个VG
#  *  4： 设备需要做成lvm 不需要挂载
#    alloc_dev: [{devName:"",devSize:200,status: 0,storeType: '1'},{devName:"",devSize:200,status: 0,name:"dockervg",'1'}]
#    file_system:  xfs/ext4   default(xfs)
#    mount_path:  挂载目录 默认以VG 名称_data 作为挂载目录

#  "{{boots_roles.default[inventory_hostname].devs|json_query('[?status!=`\"1\"`].{dev_name:devName,part_type:partType}')}}"

# 输出参数：
#    alloc_dev: [{devName:"",devSize:200,status: 0},{devName:"",devSize:200,status: 0,name:"dockervg"}]
#    mount_path:  挂载目录 默认以VG 名称_data 作为挂载目录

- name: 初始化分配结果
  set_fact: new_all_dev={{[]}} alloced_dev={{[]}} not_alloced_dev={{[]}} mount_flag=false vg_type=["1","3","4"] lv_type=["1","4"] mount_type=["1"]

- name: 获取已分配的磁盘
  set_fact: alloced_dev={{[item]|union(alloced_dev)}}
  when: item.status == "2"
  with_items: "{{alloc_dev}}"

- name: 获取未分配的磁盘
  set_fact: not_alloced_dev={{[item]|union(not_alloced_dev)}}
  when: item.status != "2" and item.status != "1"
  with_items: "{{alloc_dev}}"

- name: 设备分区
  include: parted_dev.yml
  loop: "{{range(0,not_alloced_dev|length,1)|list}}"
  loop_control:
    loop_var: item_index

- name: 设置分配结果
  set_fact: alloc_dev={{new_all_dev|union(alloced_dev)}}
  when: new_all_dev|count > 0

- name: 创建pv
  shell: |
    pvremove -y --force --force {{item.devName}}
    pvcreate {{item.devName}}
  when: item.storeType in vg_type
  with_items: "{{new_all_dev}}"

- name: 创建vg
  lvg: vg={{item.name}} pvs={{item.devName}}
  when: item.storeType in vg_type
  with_items: "{{new_all_dev}}"

- name: 清理vg 丢失的设备
  shell: vgreduce --removemissing {{item.name}}
  when: item.storeType in vg_type
  with_items: "{{new_all_dev}}"
  ignore_errors: yes

- name: 创建lvm
  lvol: vg={{item.name}}  lv=data  size=100%VG force=yes
  when: item.storeType in lv_type
  with_items: "{{new_all_dev}}"

# 这里默认每个角色只有一个挂载目录

- name: 设置挂载目录
  set_fact: mount_path=/bcos_mnt/{{item.name}}_data vg_name={{item.name}} mount_flag=true
  when: item.storeType in mount_type
  with_items: "{{alloc_dev}}"

- name: 创建工作目录
  file: path={{mount_path}} state=directory force=true
  when: mount_flag

- name: 判断目录是否已经挂载
  shell: mount | awk '{print $3}' | grep -E '^{{mount_path}}$' || true
  register: mount_dir
  when: mount_flag

- name: 格式化文件系统(xfs)
  filesystem: fstype=xfs dev=/dev/mapper/{{vg_name}}-data force=yes
  when: mount_flag and (mount_dir.stdout_lines|count == 0)

- name: 挂载数据目录
  mount: name={{mount_path}} src=/dev/mapper/{{vg_name}}-data fstype=xfs state=mounted opts=defaults,noatime
  when: mount_flag and (mount_dir.stdout_lines|count == 0)

- name: 扩容xfs文件系统
  shell: xfs_growfs /dev/mapper/{{vg_name}}-data
  when: mount_flag and (mount_dir.stdout_lines|count > 0)