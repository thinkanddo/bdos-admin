# __MACHINE_GENERATED_WARNING__

# apiVersion: v1
# kind: ServiceAccount
# metadata:
#   name: coredns
#   namespace: kube-system
#   labels:
#     kubernetes.io/cluster-service: "true"
#     addonmanager.kubernetes.io/mode: Reconcile
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   labels:
#     kubernetes.io/bootstrapping: rbac-defaults
#     addonmanager.kubernetes.io/mode: Reconcile
#   name: system:coredns
# rules:
# - apiGroups:
#   - ""
#   resources:
#   - endpoints
#   - services
#   - pods
#   - namespaces
#   verbs:
#   - list
#   - watch
# - apiGroups:
#   - ""
#   resources:
#   - nodes
#   verbs:
#   - get
# ---
# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRoleBinding
# metadata:
#   annotations:
#     rbac.authorization.kubernetes.io/autoupdate: "true"
#   labels:
#     kubernetes.io/bootstrapping: rbac-defaults
#     addonmanager.kubernetes.io/mode: EnsureExists
#   name: system:coredns
# roleRef:
#   apiGroup: rbac.authorization.k8s.io
#   kind: ClusterRole
#   name: system:coredns
# subjects:
# - kind: ServiceAccount
#   name: coredns
#   namespace: kube-system
# ---
apiVersion: v1
kind: ConfigMap
metadata:
  name: coredns
  namespace: kube-system
  labels:
    addonmanager.kubernetes.io/mode: EnsureExists
data:
  Corefile: |
    .:53 {
        errors
        health
        hosts {
            {% if extra_hosts | count >=1 %}{% for host in extra_hosts %}{{host}}
            {% endfor %}{% endif %}fallthrough
        }

        kubernetes cluster.local in-addr.arpa ip6.arpa {
            pods insecure
            upstream
            fallthrough in-addr.arpa ip6.arpa
            ttl 30
        }
        file /etc/coredns/zones/{{root_domain}} {{root_domain}}
        prometheus :9153
        forward . /etc/resolv.conf
        cache 30
        loop
        reload
        loadbalance
    }
  Dnsfile: |
    $ORIGIN {{root_domain}}.
    @   3600 IN	SOA sns.dns.icann.org. noc.dns.icann.org. (
                    2017042745 ; serial
                    7200       ; refresh (2 hours)
                    3600       ; retry (1 hour)
                    1209600    ; expire (2 weeks)
                    3600       ; minimum (1 hour)
                    )

    *       IN A     {{ingress_host[0]}}
            {% if ingress_host | count >1 %}IN A     {{ingress_host[1]}}
            {% endif %}{% if ingress_host | count >2 %}IN A     {{ingress_host[2]}}
            {% endif %}{% if ingress_host | count >3 %}IN A     {{ingress_host[3]}}
            {% endif %}{% if ingress_host | count >4 %}IN A     {{ingress_host[4]}}
            {% endif %}


---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: coredns
  namespace: kube-system
  labels:
    k8s-app: kube-dns
    kubernetes.io/cluster-service: "true"
    addonmanager.kubernetes.io/mode: Reconcile
    kubernetes.io/name: "CoreDNS"
spec:
  # replicas: not specified here:
  # 1. In order to make Addon Manager do not reconcile this replicas parameter.
  # 2. Default is 1.
  # 3. Will be tuned in real time if DNS horizontal auto-scaling is turned on.
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      k8s-app: kube-dns
  template:
    metadata:
      labels:
        k8s-app: kube-dns
      annotations:
        seccomp.security.alpha.kubernetes.io/pod: 'docker/default'
    spec:
      priorityClassName: system-cluster-critical
      serviceAccountName: coredns
      tolerations:
      - key: "CriticalAddonsOnly"
        operator: "Exists"
      nodeSelector:
        beta.kubernetes.io/os: linux
      containers:
      - name: coredns
        image: {{harbor.dns}}:{{harbor.port}}/{{images.k8s.coredns}}
        imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: 500Mi
          requests:
            cpu: 100m
            memory: 70Mi
        args: [ "-conf", "/etc/coredns/Corefile" ]
        volumeMounts:
        - mountPath: /etc/coredns/Corefile
          name: config-volume
          subPath: Corefile
          readOnly: true
        - mountPath: /etc/coredns/zones/{{root_domain}}
          name: config-volume
          subPath: {{root_domain}}
          readOnly: true
        ports:
        - containerPort: 53
          name: dns
          protocol: UDP
        - containerPort: 53
          name: dns-tcp
          protocol: TCP
        - containerPort: 9153
          name: metrics
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 60
          timeoutSeconds: 5
          successThreshold: 1
          failureThreshold: 5
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
            scheme: HTTP
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - all
          readOnlyRootFilesystem: true
      dnsPolicy: Default
      volumes:
      - name: config-volume
        configMap:
          name: coredns
          items:
          - key: Corefile
            path: Corefile
          - key: Dnsfile
            path: {{root_domain}}
# ---
# apiVersion: v1
# kind: Service
# metadata:
#   name: kube-dns
#   namespace: kube-system
#   annotations:
#     prometheus.io/port: "9153"
#     prometheus.io/scrape: "true"
#   labels:
#     k8s-app: kube-dns
#     kubernetes.io/cluster-service: "true"
#     addonmanager.kubernetes.io/mode: Reconcile
#     kubernetes.io/name: "CoreDNS"
# spec:
#   selector:
#     k8s-app: kube-dns
#   clusterIP: 10.244.0.10
#   ports:
#   - name: dns
#     port: 53
#     protocol: UDP
#   - name: dns-tcp
#     port: 53
#     protocol: TCP
#   - name: metrics
#     port: 9153
#     protocol: TCP